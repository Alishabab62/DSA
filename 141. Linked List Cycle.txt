/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // map<ListNode*,bool>visit;
        // if(head == NULL) return false;
        // while(head!=NULL){
        //     if(visit[head] == true){
        //         return true;
        //     }
        //     else{
        //         visit[head] = true;
        //     }
        //     head = head->next;
        // }
        // return false;
        ListNode * slow = head;
        ListNode * fast = head;
        if(head == NULL || head->next == NULL ) return false;
        while(fast->next!=NULL){
            fast = fast->next;
            if(fast->next != NULL){
                fast = fast->next;
                slow = slow->next;
            }
            if(slow == fast){
                return true;
            }
        }
        return false;
    }
};  