/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void storeInset(set<int>&ans,TreeNode * root){
        if(root == nullptr){
            return;
        }

        else{
            ans.insert(root->val);
            storeInset(ans,root->left);
            storeInset(ans,root->right);
        }
    }

    int findSecondMinimumValue(TreeNode* root) {
    //    if(root == nullptr){
    //        return -1;
    //    }
    //    else if(root -> left == nullptr && root->left == nullptr){
    //        return -1;
    //    }
    //    else{
            set<int>s;
            storeInset(s,root);
            int count = 0;
            if(s.size() > 1){
                for(auto i :s){
                    count++;
                    if(count == 2){
                        return i;
                    }
                }
            }   
            return -1;
    //    }
    }
};