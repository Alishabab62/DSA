class Solution {
public:
    int solve(string text1, string text2,int i, int j){
        if(i>= text1.length() || j>= text2.length()){
            return 0;
        }

        int ans;
        if(text1[i] == text2[j]){
            ans = 1 + solve(text1,text2,i+1,j+1);
        }
        else{
            ans = 0 + max(solve(text1,text2,i,j+1),solve(text1,text2,i+1,j));
        }
        return ans;
    }

    int solveUsingMemo(string &text1, string &text2,int i, int j,vector<vector<int>>&dp){
        if(i>= text1.length() || j>= text2.length()){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        } 

        int ans;
        if(text1[i] == text2[j]){
            dp[i][j] = 1 + solveUsingMemo(text1,text2,i+1,j+1,dp);
        }
        else{
            dp[i][j] = 0 + max(solveUsingMemo(text1,text2,i,j+1,dp),solveUsingMemo(text1,text2,i+1,j,dp));
        }
        return dp[i][j];
    }


    int solveUsingTabulation(string &text1, string &text2){
       
        int s1 = text1.length();
        int s2 = text2.length();
        vector<vector<int>>dp(s1+1,vector<int>(s2+1,0));

        for(int i = s1-1 ; i>=0;i--){
            int ans = 0;
            for(int j = s2-1;j>=0;j--){
                if(text1[i] == text2[j]){
                    ans = 1 + dp[i+1][j+1];
                }
                else{
                    ans = 0 + max(dp[i][j+1],dp[i+1][j]);
                }
                dp[i][j] = ans;
            }

        }
        return dp[0][0];
    }

    int longestCommonSubsequence(string text1, string text2) {
        // return solve(text1,text2,0,0);


        // int s1 = text1.length();
        // int s2 = text2.length();
        // vector<vector<int>>dp(s1,vector<int>(s2,-1));
        // return solveUsingMemo(text1,text2,0,0,dp);
        
        return solveUsingTabulation(text1,text2);

    }
};