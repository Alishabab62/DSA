class Solution {
public:
    // int solve(vector<int>& nums, int target,int sum,int i){
    //     if(i == nums.size()){
    //         if(sum == target){
    //             return 1;
    //         }
    //         else{
    //             return 0;
    //         }
    //     }
    //         return solve(nums,target,sum+nums[i],i+1) + solve(nums,target,sum-nums[i],i+1);
    // }

    int solveUsingMemo(vector<int>& nums, int target, int i,map<pair<int,int>,int>& dp) {
        if (i == nums.size()) {
            if (target == 0) {
                return 1;
            } else {
                return 0;
            }
        }
        if (dp.find({i,target}) != dp.end()) return dp[{i,target}];

        return dp[{i,target}] = solveUsingMemo(nums, target + nums[i], i + 1, dp) + solveUsingMemo(nums, target - nums[i], i + 1, dp);        
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        map<pair<int,int>,int>dp;
        return solveUsingMemo(nums, target, 0, dp); 
    }
};