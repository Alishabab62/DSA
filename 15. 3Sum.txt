class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // int s = nums.size();
        // set<vector<int>>st;
        // for(int i=0;i<s;i++){
        //     for(int j=i+1;j<s;j++){
        //         for(int k=j+1;k<s;k++){
        //             if(nums[i]+nums[j]+nums[k] == 0){
        //                 vector<int>temp = {nums[i],nums[j],nums[k]};
        //                 sort(temp.begin(),temp.end());
        //                 st.insert(temp);
        //             }
        //         }           
        //     }
        // }
        // vector<vector<int>>ans (st.begin(),st.end());
        // return ans;

        // int s = nums.size();
        // set<vector<int>>st;

        // for(int i = 0;i<s;i++){
        //     map<int,int>mp;
        //     for(int j=i+1;j<s;j++){
        //         int thirdVal = -(nums[i] + nums[j]);
        //         if(mp.find(thirdVal) != mp.end()){
        //             vector<int>temp = {nums[i],nums[j],thirdVal};
        //             sort(temp.begin(),temp.end());
        //             st.insert(temp);
        //         }
        //         mp.insert({nums[j],i});
        //     }
        // }

        // vector<vector<int>>ans (st.begin(),st.end());
        // return ans;

        int s = nums.size();
        set<vector<int>>st;
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        for(int i = 0;i<s;i++){
            if(i>0 && nums[i] == nums[i-1] ) continue;
            int j = i+1;
            int k = s-1;
            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                }
                else{
                    vector<int>temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j<k && nums[j] == nums[j-1]) j++;
                    while(j<k && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return ans;
    }
};