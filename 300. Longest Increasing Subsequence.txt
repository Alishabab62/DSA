class Solution {
public:
int solveMemo(vector<int>& nums , int curr , int prev,vector<vector<int>>&dp){
        if(curr >= nums.size()){
            return 0;
        }
        if(dp[curr][prev+1] != -1){
            return dp[curr][prev+1];
        }
        int include = 0;
        if(prev == -1 || nums[curr] > nums[prev]){
            include = 1 + solveMemo(nums,curr+1,curr,dp);
        }
        int exclude =  0 + solveMemo(nums,curr+1,prev,dp);
        int ans = max(include,exclude);
        return dp[curr][prev+1] = ans;
    }

    int solve(vector<int>& nums , int curr , int prev){
        if(curr >= nums.size()){
            return 0;
        }

        int include = 0;
        if(prev == -1 || nums[curr] > nums[prev]){
            include = 1 + solve(nums,curr+1,curr);
        }
        int exclude =  0 + solve(nums,curr+1,prev);
        int ans = max(include,exclude);
        return ans;
    }


    int lengthOfLIS(vector<int>& nums) {
        vector<vector<int>>dp(nums.size(),vector<int>(nums.size(),-1));
        int curr = 0;
        int prev = -1;
        // return solve(nums,curr,prev);
        return solveMemo(nums,curr,prev,dp);

    }
};