/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
ListNode* merge(ListNode* list1, ListNode* list2) {
        if(!list1) return list2;
        if(!list2) return list1;

        ListNode*head=NULL;
        if(list1->val<list2->val)
        {
            head=list1;
            head->next=merge(list1->next,list2);
        }
        else
        {
            head=list2;
            head->next=merge(list1,list2->next);
        }
        return head;
    }



    ListNode *mid (ListNode* head){
        ListNode * slow = head;
        ListNode * fast = head->next;

        while(fast && fast->next){
            slow = slow ->next;
            fast = fast->next->next;
        }
        return slow;
    }

ListNode* mergeSort(ListNode* head) {
    ListNode* midv = mid(head);
    if (midv == NULL || midv->next == NULL) {
        return head;
    }
    ListNode* nextNode = midv->next;
    midv->next = NULL;
    ListNode* ans = mergeSort(head);
    ListNode* ans1 = mergeSort(nextNode);
    return merge(ans, ans1);
}

    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        // if(head == NULL || head->next == NULL) return head;
        // ListNode * temp = head;
        // while(temp != NULL){
        // ListNode * tempInner = temp;
        //     while(tempInner != NULL){
        //         if(temp->val > tempInner->val ){
        //             swap(temp->val,tempInner->val);
        //         }
        //         tempInner = tempInner ->next;
        //     }
        //     temp = temp->next;
        // }
        // return head;

    return mergeSort(head);
        


    }
};