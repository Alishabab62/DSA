class Solution {
public:
    bool check(vector<vector<int>>& matrix, int target, int s, int j) {
        int e = matrix[j].size() - 1; 
        while (s <= e) {
            int mid = (s + e) / 2;
            int currentNumber = matrix[j][mid];
            if (currentNumber == target) {
                return true;
            } else if (currentNumber > target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rowSize = matrix.size();
        int colSize = matrix[0].size();

        for (int i = 0; i < rowSize; i++) {
            if (matrix[i][0] <= target && target <= matrix[i][colSize - 1]) {
                if (check(matrix, target, 0, i)) {
                    return true;
                }
            }
        }
        return false;
            
        // int s = matrix.size();

        // for(int i = 0;i<s;i++){
        //     int rowSize = matrix[0].size();
        //     if(matrix[i][0] <= target && matrix[i][rowSize-1] >= target){
        //         for(int j = 0;j<rowSize;j++){
        //             if(matrix[i][j] == target){
        //                 return true;
        //             }
        //         }
        //     }
        // }
        // return false;
    }
};