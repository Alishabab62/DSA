class Info{
    public:
        char ch;
        int count;

    Info(char c , int cnt){
        this->ch = c;
        this->count = cnt;
    }
};


class compare{
    public:
        bool operator()(Info a , Info b){
            return a.count < b.count;
        }
};

class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        priority_queue<Info,vector<Info>,compare>pq;
        string ans = "";

        if(a>0){
            Info aFre = Info('a',a);
            pq.push(aFre);
        }
        if(b>0){
            Info bFre = Info('b',b);
            pq.push(bFre);
        }
        if(c>0){
            Info cFre = Info('c',c);
            pq.push(cFre);
        }
        

        
        while(pq.size() > 1){

            Info  first = pq.top();
            pq.pop();
            Info  second = pq.top();
            pq.pop();

            if(first.count > 1){
                ans.push_back(first.ch);
                ans.push_back(first.ch);
                first.count -= 2;
            }
            else{
                ans.push_back(first.ch);
                first.count --;
            }

            if(second.count > 1 && second.count > first.count){
                ans.push_back(second.ch);
                ans.push_back(second.ch);
                second.count -= 2;
            }
            else{
                ans.push_back(second.ch);
                second.count --;
            }
            
            if(first.count > 0){
                pq.push(first);
            }

            if(second.count > 0){
                pq.push(second);
            }
        }

        while(pq.size() > 0){
            Info  first = pq.top();
            pq.pop();

            if(first.count > 1){
                ans.push_back(first.ch);
                ans.push_back(first.ch);
                first.count -= 2;
            }
            else{
                ans.push_back(first.ch);
                first.count --;
            }
        }

        return ans;
    }
};