/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int &k) {
        if(root == NULL){
            return -1;
        }
        int leftAns = kthSmallest(root -> left,k);
        if(leftAns != -1){
            return leftAns;
        }
        k--;
        if(k==0){
            return root->val;
        }
        int rightAns = kthSmallest(root -> right,k);
        return rightAns;
    }
};


//inorder traversal because we need to find kthSmallest element so inorder traversal access element in sorted order so we get third smallest element




using heap

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void storeInPQ(TreeNode* root,priority_queue <int, vector<int>, greater<int> >  & pq){
        if(root == NULL){
            return;
        }
        pq.push(root->val);
        storeInPQ(root->left,pq);
        storeInPQ(root->right,pq);   
    }
    int kthSmallest(TreeNode* root, int &k) {
        priority_queue <int, vector<int>, greater<int> > pq; 
        storeInPQ(root,pq);
        cout << endl;
        while(k > 1){
            pq.pop();
            k--;
        }
        return pq.top();
    }
};