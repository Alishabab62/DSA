class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // int size = intervals.size();
        // sort(intervals.begin(),intervals.end());
        // vector<vector<int>> ans;
        // for(int i = 0;i<size;i++){
        //     int start = intervals[i][0];
        //     int end = intervals[i][1];
        //     if(!ans.empty() && ans.back()[1] >= start){
        //         continue;
        //     }

        //     for(int j = i+1;j<size;j++){
        //         if(intervals[j][0] <= end){
        //             end = max(intervals[j][1],end);
        //         }
        //         else{
        //             break;
        //         }
        //     }
        //     ans.push_back({start,end});
        // }
        // return ans;

        int size = intervals.size();
        sort(intervals.begin(),intervals.end());
        vector<vector<int>> ans;

        for(int i = 0;i<size;i++){
            int start = intervals[i][0];
            int end = intervals[i][1];
            if(ans.size() && ans.back()[1] >= start){
                end = max(ans.back()[1],end);
                int temp = ans.back()[0];
                ans.pop_back();
                ans.push_back({temp,end});
            }
            else{
                ans.push_back({start,end});
            }
        }
        return ans;
    }
};